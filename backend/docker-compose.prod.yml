version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: ecommerce-postgres-prod
    environment:
      POSTGRES_DB: ecommerce_prod
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-prod.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ecommerce-app-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://ecommerce_user:${POSTGRES_PASSWORD}@postgres:5432/ecommerce_prod
      JWT_SECRET: b40c000ecd38bca4e57e6945e411207843b6945830d81fb4aa24c6f51d11251b
      JWT_EXPIRES_IN: 24h
      JWT_ISSUER: ecommerce-api
      JWT_AUDIENCE: ecommerce-users
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL}
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - ecommerce-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge 