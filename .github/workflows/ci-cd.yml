name: CommerFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # =============================================================================
  # LINTING & CODE QUALITY
  # =============================================================================
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run ESLint (Backend)
      run: |
        cd backend
        npm run lint || echo "ESLint not configured"
        
    - name: Run ESLint (Frontend)
      run: |
        cd frontend
        npm run lint || echo "ESLint not configured"
        
    - name: Check code formatting
      run: |
        cd backend
        npm run format:check || echo "Prettier not configured"
        cd ../frontend
        npm run format:check || echo "Prettier not configured"

  # =============================================================================
  # BACKEND TESTING
  # =============================================================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: cd backend && npm ci
      
    - name: Setup environment
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env
        echo "JWT_SECRET=test-secret" >> .env
        echo "NODE_ENV=test" >> .env
        
    - name: Run database migrations
      run: |
        cd backend
        npx prisma migrate deploy
        npx prisma generate
        
    - name: Run tests
      run: |
        cd backend
        npm run test:ci
        
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration || echo "Integration tests not configured"
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # =============================================================================
  # FRONTEND TESTING
  # =============================================================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: cd frontend && npm ci
      
    - name: Run tests
      run: |
        cd frontend
        npm run test -- --coverage --watchAll=false
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level moderate
        cd ../frontend && npm audit --audit-level moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # =============================================================================
  # BUILD & OPTIMIZATION
  # =============================================================================
  build:
    name: Build & Optimize
    runs-on: ubuntu-latest
    needs: [lint, backend-test, frontend-test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Analyze bundle size
      run: |
        cd frontend
        npm run analyze || echo "Bundle analysis completed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/build/
        retention-days: 7

  # =============================================================================
  # DOCKER BUILD
  # =============================================================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/commerflow-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/commerflow-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/commerflow-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/commerflow-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # DEPLOYMENT - STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Railway (Staging)
      uses: railway/deploy@v1
      with:
        service: ${{ secrets.RAILWAY_STAGING_SERVICE }}
        token: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: Run smoke tests
      run: |
        sleep 30  # Wait for deployment
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        
    - name: Notify deployment
      run: |
        echo "Staging deployment completed successfully!"
        echo "URL: ${{ secrets.STAGING_URL }}"

  # =============================================================================
  # DEPLOYMENT - PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Railway (Production)
      uses: railway/deploy@v1
      with:
        service: ${{ secrets.RAILWAY_PRODUCTION_SERVICE }}
        token: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: Run health checks
      run: |
        sleep 30  # Wait for deployment
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        
    - name: Run performance tests
      run: |
        npm install -g lighthouse
        lighthouse ${{ secrets.PRODUCTION_URL }} --output=json --output-path=./lighthouse-report.json
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: ./lighthouse-report.json
        retention-days: 30
        
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
        echo "URL: ${{ secrets.PRODUCTION_URL }}"

  # =============================================================================
  # MONITORING & ALERTS
  # =============================================================================
  monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run monitoring checks
      run: |
        # Health check
        curl -f ${{ secrets.PRODUCTION_URL }}/health
        
        # Performance check
        curl -w "@curl-format.txt" -o /dev/null -s ${{ secrets.PRODUCTION_URL }}/api/products
        
        # Database connectivity check
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health/database
        
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Production deployment completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Send failure notification
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup Docker images
      run: |
        docker system prune -f
        
    - name: Cleanup old artifacts
      run: |
        echo "Cleanup completed" 